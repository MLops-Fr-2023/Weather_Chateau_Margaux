AWSTemplateFormatVersion: 2010-09-09
Description: >-
  AWS CloudFormation infrastructure Template

Parameters:
  VPCCMCidrBlock:
    Type: String
    Default: 155.155.0.0/16
    Description: Enter the main VPC_Chateau_Margot CIDR block.
  AmiIdentifierPrivate:
    Type: String
    Default: ami-073f4eb2fd7b7a133
    Description: The AMI identifier to deploy.
  AmiIdentifierPublic:
    Type: String
    Default: ami-05398fb1c8b885c0c
    Description: The AMI identifier to deploy.
  S3BucketName:
    Type: String
    Default: wine-castle-storage
    Description: Enter the name for the S3 bucket.


#VPC
Resources:
  VPCCM:
    Type: 'AWS::EC2::VPC'
    Properties:
      EnableDnsSupport: true
      CidrBlock: !Ref VPCCMCidrBlock
      Tags:
        - Key: Name
          Value: 'MainVPC_CM'

#SUBNETS
  PublicSubnetCMA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: eu-west-3a
      CidrBlock: !Select [100, !Cidr [!GetAtt VPCCM.CidrBlock, 101, 8]]
      Tags:
        - Key: Name
          Value: 'MainVPC_CM-public'
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPCCM

  PublicSubnetCMB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: eu-west-3b
      CidrBlock: !Select [101, !Cidr [!GetAtt VPCCM.CidrBlock, 102, 8]]
      Tags:
        - Key: Name
          Value: 'MainVPC_CM-public'
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPCCM

  PrivateSubnetCMA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: eu-west-3a
      CidrBlock: !Select [0, !Cidr [!GetAtt VPCCM.CidrBlock, 1, 8]]
      Tags:
        - Key: Name
          Value: 'MainVPC_CM-private'
      MapPublicIpOnLaunch: false
      VpcId: !Ref VPCCM

  PrivateSubnetCMB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: eu-west-3b
      CidrBlock: !Select [1, !Cidr [!GetAtt VPCCM.CidrBlock, 2, 8]]
      Tags:
        - Key: Name
          Value: 'MainVPC_CM-private'
      MapPublicIpOnLaunch: false
      VpcId: !Ref VPCCM

#INTERNET GATEWAY
  InternetGatewayCM:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: 'MainVPC_CM-InternetGateway'

  AttachInternetGatewayCM:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPCCM
      InternetGatewayId: !Ref InternetGatewayCM


#ELASTIC IPs
  NatEipCMA:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatEipCMB:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc


#NAT
  NatGatewayCMA:
    DependsOn: AttachInternetGatewayCM
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatEipCMA.AllocationId
      SubnetId: !Ref PublicSubnetCMA
      Tags:
        - Key: Name
          Value: 'MainVPC-nat_CMA'

  NatGatewayCMB:
    DependsOn: AttachInternetGatewayCM
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatEipCMB.AllocationId
      SubnetId: !Ref PublicSubnetCMB
      Tags:
        - Key: Name
          Value: 'MainVPC-nat_CMB'


#TABLES PUBLIC
  PublicRouteTableCMA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPCCM
      Tags:
        - Key: Name
          Value: 'MainVPC_CM-route-publicA'

  AttachPublicRouteTableCMA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTableCMA
      SubnetId: !Ref PublicSubnetCMA

  PublicRouteTableCMB:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPCCM
      Tags:
        - Key: Name
          Value: 'MainVPC_CM-route-publicB'

  AttachPublicRouteTableCMB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTableCMB
      SubnetId: !Ref PublicSubnetCMB

#TABLES PRIVATE
  PrivateRouteTableCMA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPCCM
      Tags:
        - Key: Name
          Value: MainVPC_CM-route-privateA

  AttachPrivateRouteTableCMA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableCMA
      SubnetId: !Ref PrivateSubnetCMA

  PrivateRouteTableCMB:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPCCM
      Tags:
        - Key: Name
          Value: MainVPC_CM-route-privateB

  AttachPrivateRouteTableCMB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableCMB
      SubnetId: !Ref PrivateSubnetCMB

#ROADS
  PublicRouteCMA:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGatewayCM
      RouteTableId: !Ref PublicRouteTableCMA

  PublicRouteCMB:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGatewayCM
      RouteTableId: !Ref PublicRouteTableCMB

  PrivateRouteCMA:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayCMA
      RouteTableId: !Ref PrivateRouteTableCMA

  PrivateRouteCMB:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayCMB
      RouteTableId: !Ref PrivateRouteTableCMB

#Security group and NACL
  PublicSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Public Security Group
      VpcId: !Ref VPCCM
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: '-1'
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: Public_security_group


  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: LoadBalancer Security Group
      VpcId: !Ref VPCCM
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: '-1'
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: LoadBalancer_security_group


  PrivateSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Private Security Group
      VpcId: !Ref VPCCM
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: '-1'
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: Private_security_group

#NACL
  MyNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPCCM

  MyNetworkAclEntry1:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref MyNetworkAcl
      RuleNumber: 100
      Protocol: 6
      PortRange:
        From: 22
        To: 22
      Egress: false
      RuleAction: allow
      CidrBlock: 0.0.0.0/0

  MyNetworkAclEntry2:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref MyNetworkAcl
      RuleNumber: 200
      Protocol: 6
      PortRange:
        From: 80
        To: 80
      Egress: false
      RuleAction: allow
      CidrBlock: 0.0.0.0/0

#ASSOCIATION SUBNETS-NACLSs
  MySubnetAssociationPublicA:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref  PublicSubnetCMA
      NetworkAclId: !Ref MyNetworkAcl

  MySubnetAssociationPublicB:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref  PublicSubnetCMB
      NetworkAclId: !Ref MyNetworkAcl


  MySubnetAssociationPrivateA:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref  PrivateSubnetCMA
      NetworkAclId: !Ref MyNetworkAcl

  MySubnetAssociationPrivateB:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref  PrivateSubnetCMB
      NetworkAclId: !Ref MyNetworkAcl

#IAM RÃ´le for S3_access_full

  S3FullAccessRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: S3FullAccessRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess

  S3FullAccessInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref S3FullAccessRole

#Launch Configuration
  PublicLaunchConfig: 
      Type: AWS::AutoScaling::LaunchConfiguration
      Properties:
        AssociatePublicIpAddress:  True
        ImageId: !Ref AmiIdentifierPublic
        InstanceType: t3.large
        SecurityGroups:
          - !Ref PublicSecurityGroup
        KeyName: JLE_pytorch_paris
        IamInstanceProfile: !Ref S3FullAccessInstanceProfile

#Launch Configuration
  PrivateLaunchConfig: 
      Type: AWS::AutoScaling::LaunchConfiguration
      Properties:
        AssociatePublicIpAddress:  False
        ImageId: !Ref AmiIdentifierPrivate
        InstanceType: t3.large
        SecurityGroups:
          - !Ref PrivateSecurityGroup
        KeyName: JLE_pytorch_paris
        IamInstanceProfile: !Ref S3FullAccessInstanceProfile


#Scaling Group
  PubicScalingGroup:
      DependsOn: PublicTargetGroup
      Type: AWS::AutoScaling::AutoScalingGroup
      Properties:
        LaunchConfigurationName: !Ref PublicLaunchConfig
        AvailabilityZones:
          - Fn::Select: [0, Fn::GetAZs: !Ref AWS::Region]
          - Fn::Select: [1, Fn::GetAZs: !Ref AWS::Region]
        VPCZoneIdentifier:
          - !Ref PublicSubnetCMA
          - !Ref PublicSubnetCMB
        DesiredCapacity: 2
        MinSize: 1
        MaxSize: 4
        TargetGroupARNs: 
        - !Ref PublicTargetGroup

  PrivateAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName: !Ref PrivateLaunchConfig
      AvailabilityZones:
          - Fn::Select: [0, Fn::GetAZs: !Ref AWS::Region]
          - Fn::Select: [1, Fn::GetAZs: !Ref AWS::Region]
      VPCZoneIdentifier:
        - !Ref PrivateSubnetCMA
        - !Ref PrivateSubnetCMB
      DesiredCapacity: 2
      MinSize: 1
      MaxSize: 4

  PublicTargetGroup: 
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties: 
        Port: 80
        Protocol: HTTP
        VpcId: !Ref VPCCM

  PublicLoadBalancer: 
      Type: AWS::ElasticLoadBalancingV2::LoadBalancer
      Properties:
        Type: application
        Scheme: internet-facing
        SecurityGroups:
          - !Ref LoadBalancerSecurityGroup
        Subnets:
          - !Ref PublicSubnetCMA
          - !Ref PublicSubnetCMB

  PublicLoadBlancerListener:
      Type: AWS::ElasticLoadBalancingV2::Listener
      Properties: 
        LoadBalancerArn: !Ref PublicLoadBalancer
        Port: 80
        Protocol: HTTP
        DefaultActions:
          - Type: forward
            TargetGroupArn: !Ref PublicTargetGroup

  # S3 BUCKET
  bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Ref S3BucketName
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: Name
          Value: !Ref S3BucketName


  MyBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref bucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: AllowAccessFromSuperUser
            Effect: Allow
            Principal:
              AWS: arn:aws:iam::131674823919:user/SuperUser
            Action:
              - s3:GetObject
              - s3:PutObject
              - s3:ListBucket
            Resource:
              - !Sub "arn:aws:s3:::${bucket}"
              - !Sub "arn:aws:s3:::${bucket}/*"

  # VPC ENDPOINT FOR S3
  VpcEndpointS3:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      VpcId: !Ref VPCCM
      ServiceName: !Join ['', ['com.amazonaws.', !Ref 'AWS::Region', '.s3']]
      RouteTableIds:
        - !Ref PrivateRouteTableCMA
        - !Ref PrivateRouteTableCMB


Outputs:
  VPCOutput:
    Value: !Ref VPCCM

  PublicSubnetOutputCMA:
    Value: !Ref PublicSubnetCMA

  PublicSubnetOutputCMB:
    Value: !Ref PublicSubnetCMB

  PrivateSubnetOutputCMA:
    Value: !Ref PrivateSubnetCMA

  PrivateSubnetOutputCMB:
    Value: !Ref PrivateSubnetCMB

  S3BucketOutput:
    Value: !Ref bucket